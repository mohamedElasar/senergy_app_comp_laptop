{"version":3,"file":"450.index.js","mappings":";;;;;;;;;;;AAAA,4CAAqD;AACrD,iDAAgF;AAChF,2CAAqE;AAErE,MAAa,6BAA8B,SAAQ,oBAAW;IAC5D,YAAY,OAAgB;QAC1B,KAAK,CAAC,OAAO,IAAI,4CAA4C,CAAC,CAAC;QAC/D,IAAI,CAAC,IAAI,GAAG,qBAAa,CAAC,6BAA6B,CAAC;QACxD,IAAI,CAAC,OAAO,GAAG,gCAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,WAAW;YACd,wEAAwE,CAAC;IAC7E,CAAC;CACF;AARD,sEAQC;;;;;;;;;;ACTD,0CAA2B;AAC3B,mDAA4D;AAE5D,4CAAkE;AAClE,0DAA6D;AAC7D,gEAAoF;AAErE,KAAK,UAAU,MAAM,CAClC,GAAG,IAAgB;IAEnB,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,yCAAkB,CAAC,GAAG,IAAI,CAAC,CAAC;IAEvD,IAAI,OAAO,CAAC,GAAG,IAAI,IAAI,EAAE;QACvB,MAAM,IAAI,0DAA6B,EAAE,CAAC;KAC3C;IAED,MAAM,qBAAqB,CAAC,OAAO,CAAC,CAAC;IAErC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;IAEtB,OAAO,MAAM,cAAI,CAAC,GAAG,KAAK,EAAE,OAAO,CAAC,CAAC;AACvC,CAAC;AAdD,yBAcC;AAED,KAAK,UAAU,qBAAqB,CAAC,OAAqB;IACxD,MAAM,iBAAiB,GAAG,MAAM,8BAAc,CAC5C,oBAAoB,EACpB,OAAkB,CACnB,CAAC;IACF,IAAI,CAAC,iBAAiB,EAAE;QACtB,MAAM,IAAI,oCAA2B,CAAC,oBAAoB,CAAC,CAAC;KAC7D;AACH,CAAC","sources":["webpack://snyk/./src/cli/commands/report/errors/unsupported-report-command.ts","webpack://snyk/./src/cli/commands/report/index.ts"],"sourcesContent":["import { CustomError } from '../../../../lib/errors';\nimport { getErrorStringCode } from '../../test/iac/local-execution/error-utils';\nimport { IaCErrorCodes } from '../../test/iac/local-execution/types';\n\nexport class UnsupportedReportCommandError extends CustomError {\n  constructor(message?: string) {\n    super(message || 'Command \"report\" is only supported for IaC');\n    this.code = IaCErrorCodes.UnsupportedReportCommandError;\n    this.strCode = getErrorStringCode(this.code);\n    this.userMessage =\n      '\"report\" is not a supported command. Did you mean to use \"iac report\"?';\n  }\n}\n","import { MethodArgs } from '../../args';\nimport { IaCTestFlags } from '../test/iac/local-execution/types';\nimport { TestCommandResult } from '../types';\nimport test from '../test';\nimport { hasFeatureFlag } from '../../../lib/feature-flags';\nimport { Options } from '../../../lib/types';\nimport { UnsupportedFeatureFlagError } from '../../../lib/errors';\nimport { processCommandArgs } from '../process-command-args';\nimport { UnsupportedReportCommandError } from './errors/unsupported-report-command';\n\nexport default async function report(\n  ...args: MethodArgs\n): Promise<TestCommandResult> {\n  const { paths, options } = processCommandArgs(...args);\n\n  if (options.iac != true) {\n    throw new UnsupportedReportCommandError();\n  }\n\n  await assertReportSupported(options);\n\n  options.report = true;\n\n  return await test(...paths, options);\n}\n\nasync function assertReportSupported(options: IaCTestFlags) {\n  const isReportSupported = await hasFeatureFlag(\n    'iacCliShareResults',\n    options as Options,\n  );\n  if (!isReportSupported) {\n    throw new UnsupportedFeatureFlagError('iacCliShareResults');\n  }\n}\n"],"names":[],"sourceRoot":""}